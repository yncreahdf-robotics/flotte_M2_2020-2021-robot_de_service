// Auto-generated. Do not edit!

// (in-package robotino_local_move.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class LocalMoveGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.move_x = null;
      this.move_y = null;
      this.rotation = null;
      this.ignore_rotation = null;
    }
    else {
      if (initObj.hasOwnProperty('move_x')) {
        this.move_x = initObj.move_x
      }
      else {
        this.move_x = 0.0;
      }
      if (initObj.hasOwnProperty('move_y')) {
        this.move_y = initObj.move_y
      }
      else {
        this.move_y = 0.0;
      }
      if (initObj.hasOwnProperty('rotation')) {
        this.rotation = initObj.rotation
      }
      else {
        this.rotation = 0.0;
      }
      if (initObj.hasOwnProperty('ignore_rotation')) {
        this.ignore_rotation = initObj.ignore_rotation
      }
      else {
        this.ignore_rotation = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type LocalMoveGoal
    // Serialize message field [move_x]
    bufferOffset = _serializer.float32(obj.move_x, buffer, bufferOffset);
    // Serialize message field [move_y]
    bufferOffset = _serializer.float32(obj.move_y, buffer, bufferOffset);
    // Serialize message field [rotation]
    bufferOffset = _serializer.float32(obj.rotation, buffer, bufferOffset);
    // Serialize message field [ignore_rotation]
    bufferOffset = _serializer.bool(obj.ignore_rotation, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type LocalMoveGoal
    let len;
    let data = new LocalMoveGoal(null);
    // Deserialize message field [move_x]
    data.move_x = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [move_y]
    data.move_y = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [rotation]
    data.rotation = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [ignore_rotation]
    data.ignore_rotation = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robotino_local_move/LocalMoveGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '366637325822a34a6134906628e5673b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    float32 move_x		# in meters
    float32 move_y		# in meters
    float32 rotation	# in rad
    bool ignore_rotation #if true robot is not rotated after moving. if false robot is rotated "rotation" relative to the starting orientation
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new LocalMoveGoal(null);
    if (msg.move_x !== undefined) {
      resolved.move_x = msg.move_x;
    }
    else {
      resolved.move_x = 0.0
    }

    if (msg.move_y !== undefined) {
      resolved.move_y = msg.move_y;
    }
    else {
      resolved.move_y = 0.0
    }

    if (msg.rotation !== undefined) {
      resolved.rotation = msg.rotation;
    }
    else {
      resolved.rotation = 0.0
    }

    if (msg.ignore_rotation !== undefined) {
      resolved.ignore_rotation = msg.ignore_rotation;
    }
    else {
      resolved.ignore_rotation = false
    }

    return resolved;
    }
};

module.exports = LocalMoveGoal;
