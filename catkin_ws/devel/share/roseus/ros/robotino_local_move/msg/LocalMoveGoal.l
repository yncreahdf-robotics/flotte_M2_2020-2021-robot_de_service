;; Auto-generated. Do not edit!


(when (boundp 'robotino_local_move::LocalMoveGoal)
  (if (not (find-package "ROBOTINO_LOCAL_MOVE"))
    (make-package "ROBOTINO_LOCAL_MOVE"))
  (shadow 'LocalMoveGoal (find-package "ROBOTINO_LOCAL_MOVE")))
(unless (find-package "ROBOTINO_LOCAL_MOVE::LOCALMOVEGOAL")
  (make-package "ROBOTINO_LOCAL_MOVE::LOCALMOVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude LocalMoveGoal.msg.html


(defclass robotino_local_move::LocalMoveGoal
  :super ros::object
  :slots (_move_x _move_y _rotation _ignore_rotation ))

(defmethod robotino_local_move::LocalMoveGoal
  (:init
   (&key
    ((:move_x __move_x) 0.0)
    ((:move_y __move_y) 0.0)
    ((:rotation __rotation) 0.0)
    ((:ignore_rotation __ignore_rotation) nil)
    )
   (send-super :init)
   (setq _move_x (float __move_x))
   (setq _move_y (float __move_y))
   (setq _rotation (float __rotation))
   (setq _ignore_rotation __ignore_rotation)
   self)
  (:move_x
   (&optional __move_x)
   (if __move_x (setq _move_x __move_x)) _move_x)
  (:move_y
   (&optional __move_y)
   (if __move_y (setq _move_y __move_y)) _move_y)
  (:rotation
   (&optional __rotation)
   (if __rotation (setq _rotation __rotation)) _rotation)
  (:ignore_rotation
   (&optional __ignore_rotation)
   (if __ignore_rotation (setq _ignore_rotation __ignore_rotation)) _ignore_rotation)
  (:serialization-length
   ()
   (+
    ;; float32 _move_x
    4
    ;; float32 _move_y
    4
    ;; float32 _rotation
    4
    ;; bool _ignore_rotation
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _move_x
       (sys::poke _move_x (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _move_y
       (sys::poke _move_y (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _rotation
       (sys::poke _rotation (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _ignore_rotation
       (if _ignore_rotation (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _move_x
     (setq _move_x (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _move_y
     (setq _move_y (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _rotation
     (setq _rotation (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _ignore_rotation
     (setq _ignore_rotation (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get robotino_local_move::LocalMoveGoal :md5sum-) "366637325822a34a6134906628e5673b")
(setf (get robotino_local_move::LocalMoveGoal :datatype-) "robotino_local_move/LocalMoveGoal")
(setf (get robotino_local_move::LocalMoveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
float32 move_x		# in meters
float32 move_y		# in meters
float32 rotation	# in rad
bool ignore_rotation #if true robot is not rotated after moving. if false robot is rotated \"rotation\" relative to the starting orientation

")



(provide :robotino_local_move/LocalMoveGoal "366637325822a34a6134906628e5673b")


