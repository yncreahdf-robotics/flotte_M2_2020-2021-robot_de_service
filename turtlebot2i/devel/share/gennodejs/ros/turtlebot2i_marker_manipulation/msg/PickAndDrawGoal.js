// Auto-generated. Do not edit!

// (in-package turtlebot2i_marker_manipulation.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class PickAndDrawGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.frame = null;
      this.gripper_open = null;
      this.gripper_closed = null;
      this.pickup_pose = null;
      this.draw_pose = null;
      this.topic = null;
    }
    else {
      if (initObj.hasOwnProperty('frame')) {
        this.frame = initObj.frame
      }
      else {
        this.frame = '';
      }
      if (initObj.hasOwnProperty('gripper_open')) {
        this.gripper_open = initObj.gripper_open
      }
      else {
        this.gripper_open = 0.0;
      }
      if (initObj.hasOwnProperty('gripper_closed')) {
        this.gripper_closed = initObj.gripper_closed
      }
      else {
        this.gripper_closed = 0.0;
      }
      if (initObj.hasOwnProperty('pickup_pose')) {
        this.pickup_pose = initObj.pickup_pose
      }
      else {
        this.pickup_pose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('draw_pose')) {
        this.draw_pose = initObj.draw_pose
      }
      else {
        this.draw_pose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('topic')) {
        this.topic = initObj.topic
      }
      else {
        this.topic = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PickAndDrawGoal
    // Serialize message field [frame]
    bufferOffset = _serializer.string(obj.frame, buffer, bufferOffset);
    // Serialize message field [gripper_open]
    bufferOffset = _serializer.float32(obj.gripper_open, buffer, bufferOffset);
    // Serialize message field [gripper_closed]
    bufferOffset = _serializer.float32(obj.gripper_closed, buffer, bufferOffset);
    // Serialize message field [pickup_pose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.pickup_pose, buffer, bufferOffset);
    // Serialize message field [draw_pose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.draw_pose, buffer, bufferOffset);
    // Serialize message field [topic]
    bufferOffset = _serializer.string(obj.topic, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PickAndDrawGoal
    let len;
    let data = new PickAndDrawGoal(null);
    // Deserialize message field [frame]
    data.frame = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [gripper_open]
    data.gripper_open = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [gripper_closed]
    data.gripper_closed = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [pickup_pose]
    data.pickup_pose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [draw_pose]
    data.draw_pose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [topic]
    data.topic = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.frame.length;
    length += object.topic.length;
    return length + 128;
  }

  static datatype() {
    // Returns string type for a message object
    return 'turtlebot2i_marker_manipulation/PickAndDrawGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9383bb3006be8c9f40bc0d194a56a031';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    string frame
    float32 gripper_open
    float32 gripper_closed
    geometry_msgs/Pose pickup_pose
    geometry_msgs/Pose draw_pose
    string topic
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PickAndDrawGoal(null);
    if (msg.frame !== undefined) {
      resolved.frame = msg.frame;
    }
    else {
      resolved.frame = ''
    }

    if (msg.gripper_open !== undefined) {
      resolved.gripper_open = msg.gripper_open;
    }
    else {
      resolved.gripper_open = 0.0
    }

    if (msg.gripper_closed !== undefined) {
      resolved.gripper_closed = msg.gripper_closed;
    }
    else {
      resolved.gripper_closed = 0.0
    }

    if (msg.pickup_pose !== undefined) {
      resolved.pickup_pose = geometry_msgs.msg.Pose.Resolve(msg.pickup_pose)
    }
    else {
      resolved.pickup_pose = new geometry_msgs.msg.Pose()
    }

    if (msg.draw_pose !== undefined) {
      resolved.draw_pose = geometry_msgs.msg.Pose.Resolve(msg.draw_pose)
    }
    else {
      resolved.draw_pose = new geometry_msgs.msg.Pose()
    }

    if (msg.topic !== undefined) {
      resolved.topic = msg.topic;
    }
    else {
      resolved.topic = ''
    }

    return resolved;
    }
};

module.exports = PickAndDrawGoal;
