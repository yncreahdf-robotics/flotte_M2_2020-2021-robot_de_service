;; Auto-generated. Do not edit!


(when (boundp 'turtlebot2i_block_manipulation::InteractiveBlockManipulationResult)
  (if (not (find-package "TURTLEBOT2I_BLOCK_MANIPULATION"))
    (make-package "TURTLEBOT2I_BLOCK_MANIPULATION"))
  (shadow 'InteractiveBlockManipulationResult (find-package "TURTLEBOT2I_BLOCK_MANIPULATION")))
(unless (find-package "TURTLEBOT2I_BLOCK_MANIPULATION::INTERACTIVEBLOCKMANIPULATIONRESULT")
  (make-package "TURTLEBOT2I_BLOCK_MANIPULATION::INTERACTIVEBLOCKMANIPULATIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude InteractiveBlockManipulationResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass turtlebot2i_block_manipulation::InteractiveBlockManipulationResult
  :super ros::object
  :slots (_pickup_pose _place_pose ))

(defmethod turtlebot2i_block_manipulation::InteractiveBlockManipulationResult
  (:init
   (&key
    ((:pickup_pose __pickup_pose) (instance geometry_msgs::Pose :init))
    ((:place_pose __place_pose) (instance geometry_msgs::Pose :init))
    )
   (send-super :init)
   (setq _pickup_pose __pickup_pose)
   (setq _place_pose __place_pose)
   self)
  (:pickup_pose
   (&rest __pickup_pose)
   (if (keywordp (car __pickup_pose))
       (send* _pickup_pose __pickup_pose)
     (progn
       (if __pickup_pose (setq _pickup_pose (car __pickup_pose)))
       _pickup_pose)))
  (:place_pose
   (&rest __place_pose)
   (if (keywordp (car __place_pose))
       (send* _place_pose __place_pose)
     (progn
       (if __place_pose (setq _place_pose (car __place_pose)))
       _place_pose)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose _pickup_pose
    (send _pickup_pose :serialization-length)
    ;; geometry_msgs/Pose _place_pose
    (send _place_pose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose _pickup_pose
       (send _pickup_pose :serialize s)
     ;; geometry_msgs/Pose _place_pose
       (send _place_pose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose _pickup_pose
     (send _pickup_pose :deserialize buf ptr-) (incf ptr- (send _pickup_pose :serialization-length))
   ;; geometry_msgs/Pose _place_pose
     (send _place_pose :deserialize buf ptr-) (incf ptr- (send _place_pose :serialization-length))
   ;;
   self)
  )

(setf (get turtlebot2i_block_manipulation::InteractiveBlockManipulationResult :md5sum-) "3fec3f60e60c18ca7b67a7513b211e95")
(setf (get turtlebot2i_block_manipulation::InteractiveBlockManipulationResult :datatype-) "turtlebot2i_block_manipulation/InteractiveBlockManipulationResult")
(setf (get turtlebot2i_block_manipulation::InteractiveBlockManipulationResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
geometry_msgs/Pose pickup_pose
geometry_msgs/Pose place_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :turtlebot2i_block_manipulation/InteractiveBlockManipulationResult "3fec3f60e60c18ca7b67a7513b211e95")


