# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from heron/USIRSensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import heron.msg

class USIRSensors(genpy.Message):
  _md5sum = "ec3639fb43a99ba8f34b5269205642b7"
  _type = "heron/USIRSensors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ValueUnitFloat[4] gauche
ValueUnitFloat[4] droit

================================================================================
MSG: heron/ValueUnitFloat
float64 value
string unit
"""
  __slots__ = ['gauche','droit']
  _slot_types = ['heron/ValueUnitFloat[4]','heron/ValueUnitFloat[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gauche,droit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(USIRSensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gauche is None:
        self.gauche = [heron.msg.ValueUnitFloat() for _ in range(4)]
      if self.droit is None:
        self.droit = [heron.msg.ValueUnitFloat() for _ in range(4)]
    else:
      self.gauche = [heron.msg.ValueUnitFloat() for _ in range(4)]
      self.droit = [heron.msg.ValueUnitFloat() for _ in range(4)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.gauche) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.gauche), 'self.gauche')))
      for val1 in self.gauche:
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
        _x = val1.unit
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.droit) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.droit), 'self.droit')))
      for val1 in self.droit:
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
        _x = val1.unit
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gauche is None:
        self.gauche = None
      if self.droit is None:
        self.droit = None
      end = 0
      self.gauche = []
      for i in range(0, 4):
        val1 = heron.msg.ValueUnitFloat()
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unit = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unit = str[start:end]
        self.gauche.append(val1)
      self.droit = []
      for i in range(0, 4):
        val1 = heron.msg.ValueUnitFloat()
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unit = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unit = str[start:end]
        self.droit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.gauche) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.gauche), 'self.gauche')))
      for val1 in self.gauche:
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
        _x = val1.unit
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.droit) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.droit), 'self.droit')))
      for val1 in self.droit:
        _x = val1.value
        buff.write(_get_struct_d().pack(_x))
        _x = val1.unit
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gauche is None:
        self.gauche = None
      if self.droit is None:
        self.droit = None
      end = 0
      self.gauche = []
      for i in range(0, 4):
        val1 = heron.msg.ValueUnitFloat()
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unit = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unit = str[start:end]
        self.gauche.append(val1)
      self.droit = []
      for i in range(0, 4):
        val1 = heron.msg.ValueUnitFloat()
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unit = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unit = str[start:end]
        self.droit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
