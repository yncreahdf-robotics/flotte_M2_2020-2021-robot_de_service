# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from heron_isen/Coulomb_counter_cc75.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import heron_isen.msg

class Coulomb_counter_cc75(genpy.Message):
  _md5sum = "a1bb334f77b5f975a6c36fc77930ac52"
  _type = "heron_isen/Coulomb_counter_cc75"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ValueUnitInt percentage
ValueUnitFloat voltage
ValueUnitFloat capacity
ValueUnitFloat current
ValueUnitInt remaining_time
ValueUnitFloat power

================================================================================
MSG: heron_isen/ValueUnitInt
uint64 value
string unit

================================================================================
MSG: heron_isen/ValueUnitFloat
float64 value
string unit
"""
  __slots__ = ['percentage','voltage','capacity','current','remaining_time','power']
  _slot_types = ['heron_isen/ValueUnitInt','heron_isen/ValueUnitFloat','heron_isen/ValueUnitFloat','heron_isen/ValueUnitFloat','heron_isen/ValueUnitInt','heron_isen/ValueUnitFloat']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       percentage,voltage,capacity,current,remaining_time,power

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Coulomb_counter_cc75, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.percentage is None:
        self.percentage = heron_isen.msg.ValueUnitInt()
      if self.voltage is None:
        self.voltage = heron_isen.msg.ValueUnitFloat()
      if self.capacity is None:
        self.capacity = heron_isen.msg.ValueUnitFloat()
      if self.current is None:
        self.current = heron_isen.msg.ValueUnitFloat()
      if self.remaining_time is None:
        self.remaining_time = heron_isen.msg.ValueUnitInt()
      if self.power is None:
        self.power = heron_isen.msg.ValueUnitFloat()
    else:
      self.percentage = heron_isen.msg.ValueUnitInt()
      self.voltage = heron_isen.msg.ValueUnitFloat()
      self.capacity = heron_isen.msg.ValueUnitFloat()
      self.current = heron_isen.msg.ValueUnitFloat()
      self.remaining_time = heron_isen.msg.ValueUnitInt()
      self.power = heron_isen.msg.ValueUnitFloat()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.percentage.value
      buff.write(_get_struct_Q().pack(_x))
      _x = self.percentage.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.voltage.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.voltage.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.capacity.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.capacity.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.current.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.current.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.remaining_time.value
      buff.write(_get_struct_Q().pack(_x))
      _x = self.remaining_time.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.power.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.power.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.percentage is None:
        self.percentage = heron_isen.msg.ValueUnitInt()
      if self.voltage is None:
        self.voltage = heron_isen.msg.ValueUnitFloat()
      if self.capacity is None:
        self.capacity = heron_isen.msg.ValueUnitFloat()
      if self.current is None:
        self.current = heron_isen.msg.ValueUnitFloat()
      if self.remaining_time is None:
        self.remaining_time = heron_isen.msg.ValueUnitInt()
      if self.power is None:
        self.power = heron_isen.msg.ValueUnitFloat()
      end = 0
      start = end
      end += 8
      (self.percentage.value,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.percentage.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.percentage.unit = str[start:end]
      start = end
      end += 8
      (self.voltage.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.voltage.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.voltage.unit = str[start:end]
      start = end
      end += 8
      (self.capacity.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.capacity.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.capacity.unit = str[start:end]
      start = end
      end += 8
      (self.current.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current.unit = str[start:end]
      start = end
      end += 8
      (self.remaining_time.value,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remaining_time.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remaining_time.unit = str[start:end]
      start = end
      end += 8
      (self.power.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power.unit = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.percentage.value
      buff.write(_get_struct_Q().pack(_x))
      _x = self.percentage.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.voltage.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.voltage.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.capacity.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.capacity.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.current.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.current.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.remaining_time.value
      buff.write(_get_struct_Q().pack(_x))
      _x = self.remaining_time.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.power.value
      buff.write(_get_struct_d().pack(_x))
      _x = self.power.unit
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.percentage is None:
        self.percentage = heron_isen.msg.ValueUnitInt()
      if self.voltage is None:
        self.voltage = heron_isen.msg.ValueUnitFloat()
      if self.capacity is None:
        self.capacity = heron_isen.msg.ValueUnitFloat()
      if self.current is None:
        self.current = heron_isen.msg.ValueUnitFloat()
      if self.remaining_time is None:
        self.remaining_time = heron_isen.msg.ValueUnitInt()
      if self.power is None:
        self.power = heron_isen.msg.ValueUnitFloat()
      end = 0
      start = end
      end += 8
      (self.percentage.value,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.percentage.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.percentage.unit = str[start:end]
      start = end
      end += 8
      (self.voltage.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.voltage.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.voltage.unit = str[start:end]
      start = end
      end += 8
      (self.capacity.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.capacity.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.capacity.unit = str[start:end]
      start = end
      end += 8
      (self.current.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current.unit = str[start:end]
      start = end
      end += 8
      (self.remaining_time.value,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remaining_time.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remaining_time.unit = str[start:end]
      start = end
      end += 8
      (self.power.value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power.unit = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power.unit = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
