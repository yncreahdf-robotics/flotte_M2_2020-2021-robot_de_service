// Generated by gencpp from file heron/IRSensors.msg
// DO NOT EDIT!


#ifndef HERON_MESSAGE_IRSENSORS_H
#define HERON_MESSAGE_IRSENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <heron/ValueUnitFloat.h>
#include <heron/ValueUnitFloat.h>
#include <heron/ValueUnitFloat.h>
#include <heron/ValueUnitFloat.h>
#include <heron/ValueUnitFloat.h>

namespace heron
{
template <class ContainerAllocator>
struct IRSensors_
{
  typedef IRSensors_<ContainerAllocator> Type;

  IRSensors_()
    : av_gauche()
    , av_droit()
    , ar_gauche()
    , ar_droit()
    , ar()  {
    }
  IRSensors_(const ContainerAllocator& _alloc)
    : av_gauche()
    , av_droit()
    , ar_gauche()
    , ar_droit()
    , ar()  {
  (void)_alloc;
      av_gauche.assign( ::heron::ValueUnitFloat_<ContainerAllocator> (_alloc));

      av_droit.assign( ::heron::ValueUnitFloat_<ContainerAllocator> (_alloc));

      ar_gauche.assign( ::heron::ValueUnitFloat_<ContainerAllocator> (_alloc));

      ar_droit.assign( ::heron::ValueUnitFloat_<ContainerAllocator> (_alloc));

      ar.assign( ::heron::ValueUnitFloat_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::heron::ValueUnitFloat_<ContainerAllocator> , 4>  _av_gauche_type;
  _av_gauche_type av_gauche;

   typedef boost::array< ::heron::ValueUnitFloat_<ContainerAllocator> , 4>  _av_droit_type;
  _av_droit_type av_droit;

   typedef boost::array< ::heron::ValueUnitFloat_<ContainerAllocator> , 4>  _ar_gauche_type;
  _ar_gauche_type ar_gauche;

   typedef boost::array< ::heron::ValueUnitFloat_<ContainerAllocator> , 4>  _ar_droit_type;
  _ar_droit_type ar_droit;

   typedef boost::array< ::heron::ValueUnitFloat_<ContainerAllocator> , 4>  _ar_type;
  _ar_type ar;





  typedef boost::shared_ptr< ::heron::IRSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heron::IRSensors_<ContainerAllocator> const> ConstPtr;

}; // struct IRSensors_

typedef ::heron::IRSensors_<std::allocator<void> > IRSensors;

typedef boost::shared_ptr< ::heron::IRSensors > IRSensorsPtr;
typedef boost::shared_ptr< ::heron::IRSensors const> IRSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heron::IRSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heron::IRSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace heron

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'heron': ['/home/nvidia/catkin2_ws/src/heron_software/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::heron::IRSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heron::IRSensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron::IRSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron::IRSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron::IRSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron::IRSensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heron::IRSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2d4f6afdad29c06c7d455d83f2670d6";
  }

  static const char* value(const ::heron::IRSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2d4f6afdad29c06ULL;
  static const uint64_t static_value2 = 0xc7d455d83f2670d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::heron::IRSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heron/IRSensors";
  }

  static const char* value(const ::heron::IRSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heron::IRSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ValueUnitFloat[4] av_gauche\n\
ValueUnitFloat[4] av_droit\n\
ValueUnitFloat[4] ar_gauche\n\
ValueUnitFloat[4] ar_droit\n\
ValueUnitFloat[4] ar\n\
\n\
================================================================================\n\
MSG: heron/ValueUnitFloat\n\
float64 value\n\
string unit\n\
";
  }

  static const char* value(const ::heron::IRSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heron::IRSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.av_gauche);
      stream.next(m.av_droit);
      stream.next(m.ar_gauche);
      stream.next(m.ar_droit);
      stream.next(m.ar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IRSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heron::IRSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heron::IRSensors_<ContainerAllocator>& v)
  {
    s << indent << "av_gauche[]" << std::endl;
    for (size_t i = 0; i < v.av_gauche.size(); ++i)
    {
      s << indent << "  av_gauche[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::heron::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.av_gauche[i]);
    }
    s << indent << "av_droit[]" << std::endl;
    for (size_t i = 0; i < v.av_droit.size(); ++i)
    {
      s << indent << "  av_droit[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::heron::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.av_droit[i]);
    }
    s << indent << "ar_gauche[]" << std::endl;
    for (size_t i = 0; i < v.ar_gauche.size(); ++i)
    {
      s << indent << "  ar_gauche[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::heron::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.ar_gauche[i]);
    }
    s << indent << "ar_droit[]" << std::endl;
    for (size_t i = 0; i < v.ar_droit.size(); ++i)
    {
      s << indent << "  ar_droit[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::heron::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.ar_droit[i]);
    }
    s << indent << "ar[]" << std::endl;
    for (size_t i = 0; i < v.ar.size(); ++i)
    {
      s << indent << "  ar[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::heron::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.ar[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERON_MESSAGE_IRSENSORS_H
