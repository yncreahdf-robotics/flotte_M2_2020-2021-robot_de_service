// Generated by gencpp from file heron/Motion.msg
// DO NOT EDIT!


#ifndef HERON_MESSAGE_MOTION_H
#define HERON_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace heron
{
template <class ContainerAllocator>
struct Motion_
{
  typedef Motion_<ContainerAllocator> Type;

  Motion_()
    : position_x(0.0)
    , position_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , plate_height(0.0)  {
    }
  Motion_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , orientation_z(0.0)
    , orientation_w(0.0)
    , plate_height(0.0)  {
  (void)_alloc;
    }



   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _orientation_z_type;
  _orientation_z_type orientation_z;

   typedef float _orientation_w_type;
  _orientation_w_type orientation_w;

   typedef float _plate_height_type;
  _plate_height_type plate_height;





  typedef boost::shared_ptr< ::heron::Motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heron::Motion_<ContainerAllocator> const> ConstPtr;

}; // struct Motion_

typedef ::heron::Motion_<std::allocator<void> > Motion;

typedef boost::shared_ptr< ::heron::Motion > MotionPtr;
typedef boost::shared_ptr< ::heron::Motion const> MotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heron::Motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heron::Motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace heron

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'heron': ['/home/nvidia/catkin2_ws/src/heron_software/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::heron::Motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heron::Motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron::Motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron::Motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron::Motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron::Motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heron::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "095414ef2073631e78bdbf064814a71b";
  }

  static const char* value(const ::heron::Motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x095414ef2073631eULL;
  static const uint64_t static_value2 = 0x78bdbf064814a71bULL;
};

template<class ContainerAllocator>
struct DataType< ::heron::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heron/Motion";
  }

  static const char* value(const ::heron::Motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heron::Motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position_x\n\
float32 position_y\n\
\n\
float32 orientation_z\n\
float32 orientation_w\n\
\n\
float32 plate_height\n\
";
  }

  static const char* value(const ::heron::Motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heron::Motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.orientation_z);
      stream.next(m.orientation_w);
      stream.next(m.plate_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heron::Motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heron::Motion_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "orientation_z: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_z);
    s << indent << "orientation_w: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_w);
    s << indent << "plate_height: ";
    Printer<float>::stream(s, indent + "  ", v.plate_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERON_MESSAGE_MOTION_H
