// Generated by gencpp from file coulomb_counter_cc75_ros/Coulomb_counter_cc75.msg
// DO NOT EDIT!


#ifndef COULOMB_COUNTER_CC75_ROS_MESSAGE_COULOMB_COUNTER_CC75_H
#define COULOMB_COUNTER_CC75_ROS_MESSAGE_COULOMB_COUNTER_CC75_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <coulomb_counter_cc75_ros/ValueUnitInt.h>
#include <coulomb_counter_cc75_ros/ValueUnitFloat.h>
#include <coulomb_counter_cc75_ros/ValueUnitFloat.h>
#include <coulomb_counter_cc75_ros/ValueUnitFloat.h>
#include <coulomb_counter_cc75_ros/ValueUnitInt.h>
#include <coulomb_counter_cc75_ros/ValueUnitFloat.h>

namespace coulomb_counter_cc75_ros
{
template <class ContainerAllocator>
struct Coulomb_counter_cc75_
{
  typedef Coulomb_counter_cc75_<ContainerAllocator> Type;

  Coulomb_counter_cc75_()
    : percentage()
    , voltage()
    , capacity()
    , current()
    , remaining_time()
    , power()  {
    }
  Coulomb_counter_cc75_(const ContainerAllocator& _alloc)
    : percentage(_alloc)
    , voltage(_alloc)
    , capacity(_alloc)
    , current(_alloc)
    , remaining_time(_alloc)
    , power(_alloc)  {
  (void)_alloc;
    }



   typedef  ::coulomb_counter_cc75_ros::ValueUnitInt_<ContainerAllocator>  _percentage_type;
  _percentage_type percentage;

   typedef  ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator>  _voltage_type;
  _voltage_type voltage;

   typedef  ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator>  _capacity_type;
  _capacity_type capacity;

   typedef  ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator>  _current_type;
  _current_type current;

   typedef  ::coulomb_counter_cc75_ros::ValueUnitInt_<ContainerAllocator>  _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef  ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator>  _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> const> ConstPtr;

}; // struct Coulomb_counter_cc75_

typedef ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<std::allocator<void> > Coulomb_counter_cc75;

typedef boost::shared_ptr< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75 > Coulomb_counter_cc75Ptr;
typedef boost::shared_ptr< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75 const> Coulomb_counter_cc75ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coulomb_counter_cc75_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'coulomb_counter_cc75_ros': ['/home/nvidia/catkin2_ws/src/coulomb_counter_cc75_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1bb334f77b5f975a6c36fc77930ac52";
  }

  static const char* value(const ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1bb334f77b5f975ULL;
  static const uint64_t static_value2 = 0xa6c36fc77930ac52ULL;
};

template<class ContainerAllocator>
struct DataType< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coulomb_counter_cc75_ros/Coulomb_counter_cc75";
  }

  static const char* value(const ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ValueUnitInt percentage\n\
ValueUnitFloat voltage\n\
ValueUnitFloat capacity\n\
ValueUnitFloat current\n\
ValueUnitInt remaining_time\n\
ValueUnitFloat power\n\
\n\
================================================================================\n\
MSG: coulomb_counter_cc75_ros/ValueUnitInt\n\
uint64 value\n\
string unit\n\
\n\
================================================================================\n\
MSG: coulomb_counter_cc75_ros/ValueUnitFloat\n\
float64 value\n\
string unit\n\
";
  }

  static const char* value(const ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentage);
      stream.next(m.voltage);
      stream.next(m.capacity);
      stream.next(m.current);
      stream.next(m.remaining_time);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coulomb_counter_cc75_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coulomb_counter_cc75_ros::Coulomb_counter_cc75_<ContainerAllocator>& v)
  {
    s << indent << "percentage: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitInt_<ContainerAllocator> >::stream(s, indent + "  ", v.percentage);
    s << indent << "voltage: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "  ", v.voltage);
    s << indent << "capacity: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "  ", v.capacity);
    s << indent << "current: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "  ", v.current);
    s << indent << "remaining_time: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitInt_<ContainerAllocator> >::stream(s, indent + "  ", v.remaining_time);
    s << indent << "power: ";
    s << std::endl;
    Printer< ::coulomb_counter_cc75_ros::ValueUnitFloat_<ContainerAllocator> >::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COULOMB_COUNTER_CC75_ROS_MESSAGE_COULOMB_COUNTER_CC75_H
